{"version":3,"file":"TableClient.js","sourceRoot":"","sources":["../../src/TableClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  CreateTableEntityResponse,\n  DeleteTableEntityOptions,\n  GetAccessPolicyResponse,\n  GetTableEntityOptions,\n  GetTableEntityResponse,\n  ListTableEntitiesOptions,\n  SignedIdentifier,\n  TableServiceClientOptions as TableClientOptions,\n  TableEntity,\n  TableEntityQueryOptions,\n  TableEntityResult,\n  TableEntityResultPage,\n  TableTransactionResponse,\n  TransactionAction,\n  UpdateMode,\n  UpdateTableEntityOptions,\n} from \"./models.js\";\nimport type {\n  DeleteTableEntityResponse,\n  SetAccessPolicyResponse,\n  UpdateEntityResponse,\n  UpsertEntityResponse,\n} from \"./generatedModels.js\";\nimport type {\n  FullOperationResponse,\n  InternalClientPipelineOptions,\n  OperationOptions,\n  ServiceClient,\n  ServiceClientOptions,\n} from \"@azure/core-client\";\nimport type { TableDeleteEntityOptionalParams } from \"./generated/index.js\";\nimport { GeneratedClient } from \"./generated/index.js\";\nimport type { NamedKeyCredential, SASCredential, TokenCredential } from \"@azure/core-auth\";\nimport { isNamedKeyCredential, isSASCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { COSMOS_SCOPE, STORAGE_SCOPE, TablesLoggingAllowedHeaderNames } from \"./utils/constants.js\";\nimport { decodeContinuationToken, encodeContinuationToken } from \"./utils/continuationToken.js\";\nimport {\n  deserialize,\n  deserializeObjectsArray,\n  deserializeSignedIdentifier,\n  serialize,\n  serializeQueryOptions,\n  serializeSignedIdentifiers,\n} from \"./serialization.js\";\nimport { parseXML, stringifyXML } from \"@azure/core-xml\";\n\nimport { InternalTableTransaction } from \"./TableTransaction.js\";\nimport type { ListEntitiesResponse } from \"./utils/internalModels.js\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport type { Pipeline } from \"@azure/core-rest-pipeline\";\nimport type { Table } from \"./generated/operationsInterfaces/index.js\";\nimport type { TableQueryEntitiesOptionalParams } from \"./generated/models/index.js\";\nimport { Uuid } from \"./utils/uuid.js\";\nimport { apiVersionPolicy } from \"./utils/apiVersionPolicy.js\";\nimport { cosmosPatchPolicy } from \"./cosmosPathPolicy.js\";\nimport { escapeQuotes } from \"./odata.js\";\nimport { getClientParamsFromConnectionString } from \"./utils/connectionString.js\";\nimport { handleTableAlreadyExists } from \"./utils/errorHelpers.js\";\nimport { isCosmosEndpoint } from \"./utils/isCosmosEndpoint.js\";\nimport { isCredential } from \"./utils/isCredential.js\";\nimport { logger } from \"./logger.js\";\nimport { setTokenChallengeAuthenticationPolicy } from \"./utils/challengeAuthenticationUtils.js\";\nimport { tablesNamedKeyCredentialPolicy } from \"./tablesNamedCredentialPolicy.js\";\nimport { tablesSASTokenPolicy } from \"./tablesSASTokenPolicy.js\";\nimport { tracingClient } from \"./utils/tracing.js\";\n\n/**\n * A TableClient represents a Client to the Azure Tables service allowing you\n * to perform operations on a single table.\n */\nexport class TableClient {\n  /**\n   * Table Account URL\n   */\n  public url: string;\n  /**\n   * Represents a pipeline for making a HTTP request to a URL.\n   * Pipelines can have multiple policies to manage manipulating each request before and after it is made to the server.\n   */\n  public pipeline: Pipeline;\n  private table: Table;\n  private generatedClient: ServiceClient;\n  private credential?: NamedKeyCredential | SASCredential | TokenCredential;\n  private clientOptions: TableClientOptions;\n  private readonly allowInsecureConnection: boolean;\n\n  /**\n   * Name of the table to perform operations on.\n   */\n  public readonly tableName: string;\n\n  /**\n   * Creates a new instance of the TableClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation, such as \"https://myaccount.table.core.windows.net\".\n   * @param tableName - the name of the table\n   * @param credential - NamedKeyCredential used to authenticate requests. Only Supported for Node\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   *\n   * ### Example using an account name/key:\n   *\n   * ```ts snippet:ReadmeSampleCreateTableClient_NamedKeyCredential\n   * import { AzureNamedKeyCredential, TableClient } from \"@azure/data-tables\";\n   *\n   * // Enter your storage account name and shared key\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const tableName = \"<tableName>\";\n   *\n   * // Use AzureNamedKeyCredential with storage account and account key\n   * // AzureNamedKeyCredential is only available in Node.js runtime, not in browsers\n   * const credential = new AzureNamedKeyCredential(account, accountKey);\n   * const client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n   * ```\n   */\n  constructor(\n    url: string,\n    tableName: string,\n    credential: NamedKeyCredential,\n    options?: TableClientOptions,\n  );\n  /**\n   * Creates a new instance of the TableClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation, such as \"https://myaccount.table.core.windows.net\".\n   * @param tableName - the name of the table\n   * @param credential - SASCredential used to authenticate requests\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   *\n   * ### Example using a SAS Token:\n   *\n   * ```ts snippet:ReadmeSampleCreateTableClient_SASToken\n   * import { TableClient, AzureSASCredential } from \"@azure/data-tables\";\n   *\n   * const account = \"<account name>\";\n   * const sas = \"<service Shared Access Signature Token>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const clientWithSAS = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   tableName,\n   *   new AzureSASCredential(sas),\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    tableName: string,\n    credential: SASCredential,\n    options?: TableClientOptions,\n  );\n  /**\n   * Creates a new instance of the TableClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation, such as \"https://myaccount.table.core.windows.net\".\n   * @param tableName - the name of the table\n   * @param credential - Azure Active Directory credential used to authenticate requests\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   *\n   * ### Example using an Azure Active Directory credential:\n   *\n   * ```ts snippet:ReadmeSampleCreateTableClient_TokenCredential\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { TableClient } from \"@azure/data-tables\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const account = \"<account name>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const clientWithAAD = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   tableName,\n   *   credential,\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    tableName: string,\n    credential: TokenCredential,\n    options?: TableClientOptions,\n  );\n  /**\n   * Creates an instance of TableClient.\n   *\n   * @param url - A Client string pointing to Azure Storage table service, such as\n   *              \"https://myaccount.table.core.windows.net\". You can append a SAS,\n   *              such as \"https://myaccount.table.core.windows.net?sasString\".\n   * @param tableName - the name of the table\n   * @param options - Options to configure the HTTP pipeline.\n   *\n   * ### Example appending a SAS token:\n   *\n   * ```ts snippet:ReadmeSampleCreateTableClient_SASTokenURL\n   * import { TableClient } from \"@azure/data-tables\";\n   *\n   * const account = \"<account name>\";\n   * const sasToken = \"<SAS token>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const clientWithSAS = new TableClient(\n   *   `https://${account}.table.core.windows.net?${sasToken}`,\n   *   tableName,\n   * );\n   * ```\n   */\n  constructor(url: string, tableName: string, options?: TableClientOptions);\n  constructor(\n    url: string,\n    tableName: string,\n    credentialOrOptions?: NamedKeyCredential | SASCredential | TableClientOptions | TokenCredential,\n    options: TableClientOptions = {},\n  ) {\n    this.url = url;\n    this.tableName = tableName;\n    const isCosmos = isCosmosEndpoint(this.url);\n\n    const credential = isCredential(credentialOrOptions) ? credentialOrOptions : undefined;\n    this.credential = credential;\n\n    this.clientOptions = (!isCredential(credentialOrOptions) ? credentialOrOptions : options) || {};\n\n    this.allowInsecureConnection = this.clientOptions.allowInsecureConnection ?? false;\n\n    const internalPipelineOptions: ServiceClientOptions & InternalClientPipelineOptions = {\n      ...this.clientOptions,\n      endpoint: this.clientOptions.endpoint || this.url,\n      loggingOptions: {\n        logger: logger.info,\n        additionalAllowedHeaderNames: [...TablesLoggingAllowedHeaderNames],\n      },\n      deserializationOptions: {\n        parseXML,\n      },\n      serializationOptions: {\n        stringifyXML,\n      },\n    };\n\n    const generatedClient = new GeneratedClient(this.url, internalPipelineOptions);\n    if (isNamedKeyCredential(credential)) {\n      generatedClient.pipeline.addPolicy(tablesNamedKeyCredentialPolicy(credential));\n    } else if (isSASCredential(credential)) {\n      generatedClient.pipeline.addPolicy(tablesSASTokenPolicy(credential));\n    }\n\n    if (isTokenCredential(credential)) {\n      const scope = isCosmos ? COSMOS_SCOPE : STORAGE_SCOPE;\n      setTokenChallengeAuthenticationPolicy(generatedClient.pipeline, credential, scope);\n    }\n\n    if (isCosmos) {\n      generatedClient.pipeline.addPolicy(cosmosPatchPolicy());\n    }\n\n    if (options.version) {\n      generatedClient.pipeline.addPolicy(apiVersionPolicy(options.version));\n    }\n\n    this.generatedClient = generatedClient;\n    this.table = generatedClient.table;\n    this.pipeline = generatedClient.pipeline;\n  }\n\n  /**\n   * Permanently deletes the current table with all of its entities.\n   * @param options - The options parameters.\n   *\n   * ### Example deleting a table\n   * ```ts snippet:ReadmeSampleDeleteTable\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { TableClient } from \"@azure/data-tables\";\n   *\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n   *\n   * await client.deleteTable();\n   * ```\n   */\n  public deleteTable(options: OperationOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\"TableClient.deleteTable\", options, async (updatedOptions) => {\n      try {\n        await this.table.delete(this.tableName, updatedOptions);\n      } catch (e: any) {\n        if (e.statusCode === 404) {\n          logger.info(\"TableClient.deleteTable: Table doesn't exist\");\n        } else {\n          throw e;\n        }\n      }\n    });\n  }\n\n  /**\n   *  Creates a table with the tableName passed to the client constructor\n   * @param options - The options parameters.\n   *\n   * ### Example creating a table\n   * ```ts snippet:ReadmeSampleTableClientCreateTable\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { TableClient } from \"@azure/data-tables\";\n   *\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n   *\n   * // If the table 'newTable' already exists, createTable doesn't throw\n   * await client.createTable();\n   * ```\n   */\n  public createTable(options: OperationOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\"TableClient.createTable\", options, async (updatedOptions) => {\n      try {\n        await this.table.create({ name: this.tableName }, updatedOptions);\n      } catch (e: any) {\n        handleTableAlreadyExists(e, { ...updatedOptions, logger, tableName: this.tableName });\n      }\n    });\n  }\n\n  /**\n   * Returns a single entity in the table.\n   * @param partitionKey - The partition key of the entity.\n   * @param rowKey - The row key of the entity.\n   * @param options - The options parameters.\n   *\n   * ### Example getting an entity\n   * ```ts snippet:ReadmeSampleGetEntity\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { TableClient } from \"@azure/data-tables\";\n   *\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n   *\n   * const entity = await client.getEntity(\"<partitionKey>\", \"<rowKey>\");\n   * console.log(`Entity: PartitionKey: ${entity.partitionKey} RowKey: ${entity.rowKey}`);\n   * ```\n   */\n  public getEntity<T extends object = Record<string, unknown>>(\n    partitionKey: string,\n    rowKey: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: GetTableEntityOptions = {},\n  ): Promise<GetTableEntityResponse<TableEntityResult<T>>> {\n    if (partitionKey === undefined || partitionKey === null) {\n      throw new Error(\"The entity's partitionKey cannot be undefined or null.\");\n    }\n    if (rowKey === undefined || rowKey === null) {\n      throw new Error(\"The entity's rowKey cannot be undefined or null.\");\n    }\n    return tracingClient.withSpan(\"TableClient.getEntity\", options, async (updatedOptions) => {\n      let parsedBody: any;\n      function onResponse(rawResponse: FullOperationResponse, flatResponse: unknown): void {\n        parsedBody = rawResponse.parsedBody;\n        if (updatedOptions.onResponse) {\n          updatedOptions.onResponse(rawResponse, flatResponse);\n        }\n      }\n      const { disableTypeConversion, queryOptions, ...getEntityOptions } = updatedOptions;\n      await this.table.queryEntitiesWithPartitionAndRowKey(\n        this.tableName,\n        escapeQuotes(partitionKey),\n        escapeQuotes(rowKey),\n        {\n          ...getEntityOptions,\n          queryOptions: serializeQueryOptions(queryOptions || {}),\n          onResponse,\n        },\n      );\n      const tableEntity = deserialize<TableEntityResult<T>>(\n        parsedBody,\n        disableTypeConversion ?? false,\n      );\n\n      return tableEntity;\n    });\n  }\n\n  /**\n   * Queries entities in a table.\n   * @param options - The options parameters.\n   *\n   * Example listing entities\n   * ```ts snippet:ReadmeSampleListEntities\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { TableClient } from \"@azure/data-tables\";\n   *\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n   *\n   * let i = 0;\n   * const entities = client.listEntities();\n   * for await (const entity of entities) {\n   *   console.log(`Entity${++i}: PartitionKey: ${entity.partitionKey} RowKey: ${entity.rowKey}`);\n   * }\n   * ```\n   */\n  public listEntities<T extends object = Record<string, unknown>>(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: ListTableEntitiesOptions = {},\n  ): PagedAsyncIterableIterator<TableEntityResult<T>, TableEntityResultPage<T>> {\n    const tableName = this.tableName;\n    const iter = this.listEntitiesAll<T>(tableName, options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings) => {\n        const pageOptions: InternalListTableEntitiesOptions = {\n          ...options,\n          queryOptions: { ...options.queryOptions, top: settings?.maxPageSize },\n        };\n\n        if (settings?.continuationToken) {\n          pageOptions.continuationToken = settings.continuationToken;\n        }\n\n        return this.listEntitiesPage(tableName, pageOptions);\n      },\n    };\n  }\n\n  private async *listEntitiesAll<T extends object>(\n    tableName: string,\n    options?: InternalListTableEntitiesOptions,\n  ): AsyncIterableIterator<TableEntityResult<T>> {\n    const firstPage = await this._listEntities<T>(tableName, options);\n    yield* firstPage;\n    if (firstPage.continuationToken) {\n      const optionsWithContinuation: InternalListTableEntitiesOptions = {\n        ...options,\n        continuationToken: firstPage.continuationToken,\n      };\n      for await (const page of this.listEntitiesPage<T>(tableName, optionsWithContinuation)) {\n        yield* page;\n      }\n    }\n  }\n\n  private async *listEntitiesPage<T extends object>(\n    tableName: string,\n    options: InternalListTableEntitiesOptions = {},\n  ): AsyncIterableIterator<ListEntitiesResponse<TableEntityResult<T>>> {\n    let result = await tracingClient.withSpan(\n      \"TableClient.listEntitiesPage\",\n      options,\n      (updatedOptions) => this._listEntities<T>(tableName, updatedOptions),\n    );\n\n    yield result;\n\n    while (result.continuationToken) {\n      const optionsWithContinuation: InternalListTableEntitiesOptions = {\n        ...options,\n        continuationToken: result.continuationToken,\n      };\n\n      result = await tracingClient.withSpan(\n        \"TableClient.listEntitiesPage\",\n        optionsWithContinuation,\n        (updatedOptions, span) => {\n          span.setAttribute(\"continuationToken\", result.continuationToken);\n          return this._listEntities<T>(tableName, updatedOptions);\n        },\n      );\n      yield result;\n    }\n  }\n\n  private async _listEntities<T extends object>(\n    tableName: string,\n    options: InternalListTableEntitiesOptions = {},\n  ): Promise<TableEntityResultPage<T>> {\n    const { disableTypeConversion = false } = options;\n    const queryOptions = serializeQueryOptions(options.queryOptions || {});\n    const listEntitiesOptions: TableQueryEntitiesOptionalParams = {\n      ...options,\n      queryOptions,\n    };\n\n    // If a continuation token is used, decode it and set the next row and partition key\n    if (options.continuationToken) {\n      const continuationToken = decodeContinuationToken(options.continuationToken);\n      listEntitiesOptions.nextRowKey = continuationToken.nextRowKey;\n      listEntitiesOptions.nextPartitionKey = continuationToken.nextPartitionKey;\n    }\n\n    const {\n      xMsContinuationNextPartitionKey: nextPartitionKey,\n      xMsContinuationNextRowKey: nextRowKey,\n      value,\n    } = await this.table.queryEntities(tableName, listEntitiesOptions);\n\n    const tableEntities = deserializeObjectsArray<TableEntityResult<T>>(\n      value ?? [],\n      disableTypeConversion,\n    );\n\n    // Encode nextPartitionKey and nextRowKey as a single continuation token and add it as a\n    // property to the page.\n    const continuationToken = encodeContinuationToken(nextPartitionKey, nextRowKey);\n    const page: TableEntityResultPage<T> = Object.assign([...tableEntities], {\n      continuationToken,\n    });\n\n    return page;\n  }\n\n  /**\n   * Insert entity in the table.\n   * @param entity - The properties for the table entity.\n   * @param options - The options parameters.\n   *\n   * ### Example creating an entity\n   * ```ts snippet:ReadmeSampleCreateEntity\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { TableClient } from \"@azure/data-tables\";\n   *\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n   *\n   * const testEntity = {\n   *   partitionKey: \"P1\",\n   *   rowKey: \"R1\",\n   *   foo: \"foo\",\n   *   bar: 123,\n   * };\n   * await client.createEntity(testEntity);\n   * ```\n   */\n  public createEntity<T extends object>(\n    entity: TableEntity<T>,\n    options: OperationOptions = {},\n  ): Promise<CreateTableEntityResponse> {\n    return tracingClient.withSpan(\"TableClient.createEntity\", options, (updatedOptions) => {\n      const { ...createTableEntity } = updatedOptions || {};\n      return this.table.insertEntity(this.tableName, {\n        ...createTableEntity,\n        tableEntityProperties: serialize(entity),\n        responsePreference: \"return-no-content\",\n      });\n    });\n  }\n\n  /**\n   * Deletes the specified entity in the table.\n   * @param partitionKey - The partition key of the entity.\n   * @param rowKey - The row key of the entity.\n   * @param options - The options parameters.\n   *\n   * ### Example deleting an entity\n   * ```ts snippet:ReadmeSampleDeleteEntity\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { TableClient } from \"@azure/data-tables\";\n   *\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n   *\n   * // deleteEntity deletes the entity that matches exactly the partitionKey and rowKey\n   * await client.deleteEntity(\"<partitionKey>\", \"<rowKey>\");\n   * ```\n   */\n  public deleteEntity(\n    partitionKey: string,\n    rowKey: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: DeleteTableEntityOptions = {},\n  ): Promise<DeleteTableEntityResponse> {\n    if (partitionKey === undefined || partitionKey === null) {\n      throw new Error(\"The entity's partitionKey cannot be undefined or null.\");\n    }\n    if (rowKey === undefined || rowKey === null) {\n      throw new Error(\"The entity's rowKey cannot be undefined or null.\");\n    }\n    return tracingClient.withSpan(\"TableClient.deleteEntity\", options, (updatedOptions) => {\n      const { etag = \"*\", ...rest } = updatedOptions;\n      const deleteOptions: TableDeleteEntityOptionalParams = {\n        ...rest,\n      };\n      return this.table.deleteEntity(\n        this.tableName,\n        escapeQuotes(partitionKey),\n        escapeQuotes(rowKey),\n        etag,\n        deleteOptions,\n      );\n    });\n  }\n\n  /**\n   * Update an entity in the table.\n   * @param entity - The properties of the entity to be updated.\n   * @param mode - The different modes for updating the entity:\n   *               - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.\n   *               - Replace: Updates an existing entity by replacing the entire entity.\n   * @param options - The options parameters.\n   *\n   * ### Example updating an entity\n   * ```ts snippet:ReadmeSampleUpdateEntity\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { TableClient } from \"@azure/data-tables\";\n   *\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n   *\n   * const entity = { partitionKey: \"p1\", rowKey: \"r1\", bar: \"updatedBar\" };\n   *\n   * // Update uses update mode \"Merge\" as default\n   * // merge means that update will match a stored entity\n   * // that has the same partitionKey and rowKey as the entity\n   * // passed to the method and then will only update the properties present in it.\n   * // Any other properties that are not defined in the entity passed to updateEntity\n   * // will remain as they are in the service\n   * await client.updateEntity(entity);\n   *\n   * // We can also set the update mode to Replace, which will match the entity passed\n   * // to updateEntity with one stored in the service and replace with the new one.\n   * // If there are any missing properties in the entity passed to updateEntity, they\n   * // will be removed from the entity stored in the service\n   * await client.updateEntity(entity, \"Replace\");\n   * ```\n   */\n  public updateEntity<T extends object>(\n    entity: TableEntity<T>,\n    mode: UpdateMode = \"Merge\",\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: UpdateTableEntityOptions = {},\n  ): Promise<UpdateEntityResponse> {\n    if (entity.partitionKey === undefined || entity.partitionKey === null) {\n      throw new Error(\"The entity's partitionKey cannot be undefined or null.\");\n    }\n    if (entity.rowKey === undefined || entity.rowKey === null) {\n      throw new Error(\"The entity's rowKey cannot be undefined or null.\");\n    }\n    return tracingClient.withSpan(\n      \"TableClient.updateEntity\",\n      options,\n      async (updatedOptions) => {\n        const partitionKey = escapeQuotes(entity.partitionKey);\n        const rowKey = escapeQuotes(entity.rowKey);\n\n        const { etag = \"*\", ...updateEntityOptions } = updatedOptions || {};\n        if (mode === \"Merge\") {\n          return this.table.mergeEntity(this.tableName, partitionKey, rowKey, {\n            tableEntityProperties: serialize(entity),\n            ifMatch: etag,\n            ...updateEntityOptions,\n          });\n        }\n        if (mode === \"Replace\") {\n          return this.table.updateEntity(this.tableName, partitionKey, rowKey, {\n            tableEntityProperties: serialize(entity),\n            ifMatch: etag,\n            ...updateEntityOptions,\n          });\n        }\n\n        throw new Error(`Unexpected value for update mode: ${mode}`);\n      },\n      {\n        spanAttributes: {\n          updateEntityMode: mode,\n        },\n      },\n    );\n  }\n\n  /**\n   * Upsert an entity in the table.\n   * @param entity - The properties for the table entity.\n   * @param mode - The different modes for updating the entity:\n   *               - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.\n   *               - Replace: Updates an existing entity by replacing the entire entity.\n   * @param options - The options parameters.\n   *\n   * ### Example upserting an entity\n   * ```ts snippet:ReadmeSampleUpsertEntity\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { TableClient } from \"@azure/data-tables\";\n   *\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n   *\n   * const entity = { partitionKey: \"p1\", rowKey: \"r1\", bar: \"updatedBar\" };\n   *\n   * // Upsert uses update mode \"Merge\" as default.\n   * // This behaves similarly to update but creates the entity\n   * // if it doesn't exist in the service\n   * await client.upsertEntity(entity);\n   *\n   * // We can also set the update mode to Replace.\n   * // This behaves similarly to update but creates the entity\n   * // if it doesn't exist in the service\n   * await client.upsertEntity(entity, \"Replace\");\n   * ```\n   */\n  public upsertEntity<T extends object>(\n    entity: TableEntity<T>,\n    mode: UpdateMode = \"Merge\",\n    options: OperationOptions = {},\n  ): Promise<UpsertEntityResponse> {\n    return tracingClient.withSpan(\n      \"TableClient.upsertEntity\",\n      options,\n      async (updatedOptions) => {\n        if (entity.partitionKey === undefined || entity.partitionKey === null) {\n          throw new Error(\"The entity's partitionKey cannot be undefined or null.\");\n        }\n        if (entity.rowKey === undefined || entity.rowKey === null) {\n          throw new Error(\"The entity's rowKey cannot be undefined or null.\");\n        }\n\n        const partitionKey = escapeQuotes(entity.partitionKey);\n        const rowKey = escapeQuotes(entity.rowKey);\n\n        if (mode === \"Merge\") {\n          return this.table.mergeEntity(this.tableName, partitionKey, rowKey, {\n            tableEntityProperties: serialize(entity),\n            ...updatedOptions,\n          });\n        }\n\n        if (mode === \"Replace\") {\n          return this.table.updateEntity(this.tableName, partitionKey, rowKey, {\n            tableEntityProperties: serialize(entity),\n            ...updatedOptions,\n          });\n        }\n        throw new Error(`Unexpected value for update mode: ${mode}`);\n      },\n      {\n        spanAttributes: {\n          upsertEntityMode: mode,\n        },\n      },\n    );\n  }\n\n  /**\n   * Retrieves details about any stored access policies specified on the table that may be used with\n   * Shared Access Signatures.\n   * @param options - The options parameters.\n   */\n  public getAccessPolicy(options: OperationOptions = {}): Promise<GetAccessPolicyResponse> {\n    return tracingClient.withSpan(\n      \"TableClient.getAccessPolicy\",\n      options,\n      async (updatedOptions) => {\n        const signedIdentifiers = await this.table.getAccessPolicy(this.tableName, updatedOptions);\n        return deserializeSignedIdentifier(signedIdentifiers);\n      },\n    );\n  }\n\n  /**\n   * Sets stored access policies for the table that may be used with Shared Access Signatures.\n   * @param tableAcl - The Access Control List for the table.\n   * @param options - The options parameters.\n   */\n  public setAccessPolicy(\n    tableAcl: SignedIdentifier[],\n    options: OperationOptions = {},\n  ): Promise<SetAccessPolicyResponse> {\n    return tracingClient.withSpan(\"TableClient.setAccessPolicy\", options, (updatedOptions) => {\n      const serlializedAcl = serializeSignedIdentifiers(tableAcl);\n      return this.table.setAccessPolicy(this.tableName, {\n        ...updatedOptions,\n        tableAcl: serlializedAcl,\n      });\n    });\n  }\n\n  /**\n   * Submits a Transaction which is composed of a set of actions. You can provide the actions as a list\n   * or you can use {@link TableTransaction} to help building the transaction.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleSubmitTransaction\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { TableClient, TransactionAction } from \"@azure/data-tables\";\n   *\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n   *\n   * const actions: TransactionAction[] = [\n   *   [\"create\", { partitionKey: \"p1\", rowKey: \"1\", data: \"test1\" }],\n   *   [\"delete\", { partitionKey: \"p1\", rowKey: \"2\" }],\n   *   [\"update\", { partitionKey: \"p1\", rowKey: \"3\", data: \"newTest\" }, \"Merge\"],\n   * ];\n   * const result = await client.submitTransaction(actions);\n   * ```\n   *\n   * Example usage with TableTransaction:\n   * ```ts snippet:ReadmeSampleSubmitTransactionWithTableTransaction\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { TableClient, TableTransaction } from \"@azure/data-tables\";\n   *\n   * const account = \"<account>\";\n   * const accountKey = \"<accountkey>\";\n   * const tableName = \"<tableName>\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new TableClient(`https://${account}.table.core.windows.net`, tableName, credential);\n   *\n   * const transaction = new TableTransaction();\n   *\n   * // Call the available action in the TableTransaction object\n   * transaction.createEntity({ partitionKey: \"p1\", rowKey: \"1\", data: \"test1\" });\n   * transaction.deleteEntity(\"p1\", \"2\");\n   * transaction.updateEntity({ partitionKey: \"p1\", rowKey: \"3\", data: \"newTest\" }, \"Merge\");\n   *\n   * // submitTransaction with the actions list on the transaction.\n   * const result = await client.submitTransaction(transaction.actions);\n   * ```\n   *\n   * @param actions - tuple that contains the action to perform, and the entity to perform the action with\n   * @param options - Options for the request.\n   */\n  public async submitTransaction(\n    actions: TransactionAction[],\n\n    options: OperationOptions = {},\n  ): Promise<TableTransactionResponse> {\n    const partitionKey = actions[0][1].partitionKey;\n    const transactionId = Uuid.generateUuid();\n    const changesetId = Uuid.generateUuid();\n\n    // Add pipeline\n    const transactionClient = new InternalTableTransaction(\n      this.url,\n      partitionKey,\n      transactionId,\n      changesetId,\n      this.generatedClient,\n      new TableClient(this.url, this.tableName),\n      this.credential,\n      this.allowInsecureConnection,\n    );\n\n    for (const item of actions) {\n      const [action, entity, updateMode = \"Merge\", updateOptions] = item;\n      switch (action) {\n        case \"create\":\n          transactionClient.createEntity(entity);\n          break;\n        case \"delete\":\n          transactionClient.deleteEntity(entity.partitionKey, entity.rowKey);\n          break;\n        case \"update\":\n          transactionClient.updateEntity(entity, updateMode, updateOptions);\n          break;\n        case \"upsert\":\n          transactionClient.upsertEntity(entity, updateMode);\n      }\n    }\n\n    return transactionClient.submitTransaction(options);\n  }\n\n  /**\n   *\n   * Creates an instance of TableClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                           [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                           Account connection string example -\n   *                           `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                           SAS connection string example -\n   *                           `BlobEndpoint=https://myaccount.table.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Options to configure the HTTP pipeline.\n   * @returns A new TableClient from the given connection string.\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    tableName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: TableClientOptions,\n  ): TableClient {\n    const {\n      url,\n      options: clientOptions,\n      credential,\n    } = getClientParamsFromConnectionString(connectionString, options);\n    if (credential) {\n      return new TableClient(url, tableName, credential, clientOptions);\n    } else {\n      return new TableClient(url, tableName, clientOptions);\n    }\n  }\n}\n\ntype InternalQueryOptions = TableEntityQueryOptions & { top?: number };\ninterface InternalListTableEntitiesOptions extends ListTableEntitiesOptions {\n  queryOptions?: InternalQueryOptions;\n  /**\n   * An entity query continuation token from a previous call.\n   */\n  continuationToken?: string;\n  /**\n   * If true, automatic type conversion will be disabled and entity properties will\n   * be represented by full metadata types. For example, an Int32 value will be \\{value: \"123\", type: \"Int32\"\\} instead of 123.\n   * This option applies for all the properties\n   */\n  disableTypeConversion?: boolean;\n}\n"]}