"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.comp2 = exports.comp1 = exports.restype = exports.tableServiceProperties = exports.accept3 = exports.tableAcl = exports.contentType2 = exports.comp = exports.accept2 = exports.ifMatch1 = exports.ifMatch = exports.tableEntityProperties = exports.contentType1 = exports.rowKey = exports.partitionKey = exports.nextRowKey = exports.nextPartitionKey = exports.timeout = exports.table = exports.accept1 = exports.responsePreference = exports.tableProperties = exports.contentType = exports.nextTableName = exports.filter = exports.select = exports.top = exports.format = exports.dataServiceVersion = exports.requestId = exports.version = exports.url = exports.accept = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json;odata=minimalmetadata",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.url = {
    parameterPath: "url",
    mapper: {
        serializedName: "url",
        required: true,
        xmlName: "url",
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.version = {
    parameterPath: "version",
    mapper: {
        defaultValue: "2019-02-02",
        isConstant: true,
        serializedName: "x-ms-version",
        type: {
            name: "String"
        }
    }
};
exports.requestId = {
    parameterPath: ["options", "requestId"],
    mapper: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
            name: "String"
        }
    }
};
exports.dataServiceVersion = {
    parameterPath: "dataServiceVersion",
    mapper: {
        defaultValue: "3.0",
        isConstant: true,
        serializedName: "DataServiceVersion",
        type: {
            name: "String"
        }
    }
};
exports.format = {
    parameterPath: ["options", "queryOptions", "format"],
    mapper: {
        serializedName: "$format",
        xmlName: "$format",
        type: {
            name: "String"
        }
    }
};
exports.top = {
    parameterPath: ["options", "queryOptions", "top"],
    mapper: {
        constraints: {
            InclusiveMinimum: 0
        },
        serializedName: "$top",
        xmlName: "$top",
        type: {
            name: "Number"
        }
    }
};
exports.select = {
    parameterPath: ["options", "queryOptions", "select"],
    mapper: {
        serializedName: "$select",
        xmlName: "$select",
        type: {
            name: "String"
        }
    }
};
exports.filter = {
    parameterPath: ["options", "queryOptions", "filter"],
    mapper: {
        serializedName: "$filter",
        xmlName: "$filter",
        type: {
            name: "String"
        }
    }
};
exports.nextTableName = {
    parameterPath: ["options", "nextTableName"],
    mapper: {
        serializedName: "NextTableName",
        xmlName: "NextTableName",
        type: {
            name: "String"
        }
    }
};
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json;odata=nometadata",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.tableProperties = {
    parameterPath: "tableProperties",
    mapper: mappers_js_1.TableProperties
};
exports.responsePreference = {
    parameterPath: ["options", "responsePreference"],
    mapper: {
        serializedName: "Prefer",
        xmlName: "Prefer",
        type: {
            name: "String"
        }
    }
};
exports.accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.table = {
    parameterPath: "table",
    mapper: {
        serializedName: "table",
        required: true,
        xmlName: "table",
        type: {
            name: "String"
        }
    }
};
exports.timeout = {
    parameterPath: ["options", "timeout"],
    mapper: {
        constraints: {
            InclusiveMinimum: 0
        },
        serializedName: "timeout",
        xmlName: "timeout",
        type: {
            name: "Number"
        }
    }
};
exports.nextPartitionKey = {
    parameterPath: ["options", "nextPartitionKey"],
    mapper: {
        serializedName: "NextPartitionKey",
        xmlName: "NextPartitionKey",
        type: {
            name: "String"
        }
    }
};
exports.nextRowKey = {
    parameterPath: ["options", "nextRowKey"],
    mapper: {
        serializedName: "NextRowKey",
        xmlName: "NextRowKey",
        type: {
            name: "String"
        }
    }
};
exports.partitionKey = {
    parameterPath: "partitionKey",
    mapper: {
        serializedName: "partitionKey",
        required: true,
        xmlName: "partitionKey",
        type: {
            name: "String"
        }
    }
};
exports.rowKey = {
    parameterPath: "rowKey",
    mapper: {
        serializedName: "rowKey",
        required: true,
        xmlName: "rowKey",
        type: {
            name: "String"
        }
    }
};
exports.contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.tableEntityProperties = {
    parameterPath: ["options", "tableEntityProperties"],
    mapper: {
        serializedName: "tableEntityProperties",
        xmlName: "tableEntityProperties",
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } }
        }
    }
};
exports.ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        xmlName: "If-Match",
        type: {
            name: "String"
        }
    }
};
exports.ifMatch1 = {
    parameterPath: "ifMatch",
    mapper: {
        serializedName: "If-Match",
        required: true,
        xmlName: "If-Match",
        type: {
            name: "String"
        }
    }
};
exports.accept2 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.comp = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "acl",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
exports.contentType2 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.tableAcl = {
    parameterPath: ["options", "tableAcl"],
    mapper: {
        serializedName: "tableAcl",
        xmlName: "SignedIdentifiers",
        xmlIsWrapped: true,
        xmlElementName: "SignedIdentifier",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Composite",
                    className: "SignedIdentifier"
                }
            }
        }
    }
};
exports.accept3 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.tableServiceProperties = {
    parameterPath: "tableServiceProperties",
    mapper: mappers_js_1.TableServiceProperties
};
exports.restype = {
    parameterPath: "restype",
    mapper: {
        defaultValue: "service",
        isConstant: true,
        serializedName: "restype",
        type: {
            name: "String"
        }
    }
};
exports.comp1 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "properties",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
exports.comp2 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "stats",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map