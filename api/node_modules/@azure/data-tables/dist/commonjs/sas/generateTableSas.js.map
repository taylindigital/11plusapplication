{"version":3,"file":"generateTableSas.js","sourceRoot":"","sources":["../../../src/sas/generateTableSas.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAiBlC,4CAiCC;AA/CD,gDAAwD;AAExD,6EAA+E;AAC/E,mEAAwE;AAExE;;;;;;;;GAQG;AACH,SAAgB,gBAAgB,CAC9B,SAAiB,EACjB,UAA8B,EAC9B,UAAmC,EAAE;IAErC,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC;IAEzC,IAAI,CAAC,IAAA,gCAAoB,EAAC,UAAU,CAAC,EAAE,CAAC;QACtC,MAAM,UAAU,CACd,+FAA+F,CAChG,CAAC;IACJ,CAAC;IAED,sEAAsE;IACtE,8DAA8D;IAC9D,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,WAAW,GAAG,IAAA,qDAA6B,EAAC,GAAG,CAAC,CAAC;QACnD,CAAC;QAED,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;YAC5B,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,SAAS,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED,MAAM,GAAG,GAAG,IAAA,4DAA+B,EAAC,SAAS,EAAE,UAAU,kCAC5D,OAAO,KACV,SAAS;QACT,WAAW,IACX,CAAC,QAAQ,EAAE,CAAC;IAEd,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { NamedKeyCredential } from \"@azure/core-auth\";\nimport { isNamedKeyCredential } from \"@azure/core-auth\";\nimport type { TableSasSignatureValues } from \"./tableSasSignatureValues.js\";\nimport { generateTableSasQueryParameters } from \"./tableSasSignatureValues.js\";\nimport { tableSasPermissionsFromString } from \"./tableSasPermisions.js\";\n\n/**\n * Generates a Table Service Shared Access Signature (SAS) URI based on the client properties\n * and parameters passed in. The SAS is signed by the shared key credential of the client.\n *\n * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n *\n * @param options - Optional parameters.\n * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n */\nexport function generateTableSas(\n  tableName: string,\n  credential: NamedKeyCredential,\n  options: TableSasSignatureValues = {},\n): string {\n  let { expiresOn, permissions } = options;\n\n  if (!isNamedKeyCredential(credential)) {\n    throw RangeError(\n      \"Can only generate the account SAS when the client is initialized with a shared key credential\",\n    );\n  }\n\n  // expiresOn and permissions are optional if an identifier is provided\n  // set defaults when no identifier and no values were provided\n  if (!options.identifier) {\n    if (!permissions) {\n      permissions = tableSasPermissionsFromString(\"r\");\n    }\n\n    if (expiresOn === undefined) {\n      const now = new Date();\n      expiresOn = new Date(now.getTime() + 3600 * 1000);\n    }\n  }\n\n  const sas = generateTableSasQueryParameters(tableName, credential, {\n    ...options,\n    expiresOn,\n    permissions,\n  }).toString();\n\n  return sas;\n}\n"]}