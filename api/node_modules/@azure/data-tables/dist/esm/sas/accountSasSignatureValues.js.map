{"version":3,"file":"accountSasSignatureValues.js","sourceRoot":"","sources":["../../../src/sas/accountSasSignatureValues.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,6BAA6B,EAAE,MAAM,4BAA4B,CAAC;AAE3E,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAElD,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAC7D,OAAO,EACL,iCAAiC,EACjC,+BAA+B,GAChC,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAE,4BAA4B,EAAE,0BAA0B,EAAE,MAAM,yBAAyB,CAAC;AAEnG,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AAClE,OAAO,EAAE,oBAAoB,EAAE,MAAM,iCAAiC,CAAC;AA8DvE;;;;;;;;;;GAUG;AACH,MAAM,UAAU,iCAAiC,CAC/C,yBAAoD,EACpD,UAA8B;IAE9B,MAAM,OAAO,GAAG,yBAAyB,CAAC,OAAO;QAC/C,CAAC,CAAC,yBAAyB,CAAC,OAAO;QACnC,CAAC,CAAC,eAAe,CAAC;IAEpB,MAAM,iBAAiB,GAAG,6BAA6B,CAAC,yBAAyB,CAAC,WAAW,CAAC,CAAC;IAC/F,MAAM,cAAc,GAAG,0BAA0B,CAC/C,4BAA4B,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CACjE,CAAC;IACF,mFAAmF;IACnF,MAAM,mBAAmB,GAAG,+BAA+B,CACzD,iCAAiC,CAAC,yBAAyB,CAAC,aAAa,CAAC,CAC3E,CAAC;IAEF,MAAM,YAAY,GAAG;QACnB,UAAU,CAAC,IAAI;QACf,iBAAiB;QACjB,cAAc;QACd,mBAAmB;QACnB,yBAAyB,CAAC,QAAQ;YAChC,CAAC,CAAC,oBAAoB,CAAC,yBAAyB,CAAC,QAAQ,EAAE,KAAK,CAAC;YACjE,CAAC,CAAC,EAAE;QACN,oBAAoB,CAAC,yBAAyB,CAAC,SAAS,EAAE,KAAK,CAAC;QAChE,yBAAyB,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;QAC3F,yBAAyB,CAAC,QAAQ,CAAC,CAAC,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;QAC5E,OAAO;QACP,EAAE,EAAE,uDAAuD;KAC5D,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEb,MAAM,SAAS,GAAW,iBAAiB,CAAC,YAAY,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;IAE1E,OAAO,IAAI,kBAAkB,CAAC,OAAO,EAAE,SAAS,EAAE;QAChD,WAAW,EAAE,iBAAiB,CAAC,QAAQ,EAAE;QACzC,QAAQ,EAAE,cAAc;QACxB,aAAa,EAAE,mBAAmB;QAClC,QAAQ,EAAE,yBAAyB,CAAC,QAAQ;QAC5C,QAAQ,EAAE,yBAAyB,CAAC,QAAQ;QAC5C,SAAS,EAAE,yBAAyB,CAAC,SAAS;QAC9C,OAAO,EAAE,yBAAyB,CAAC,OAAO;KAC3C,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AccountSasPermissions } from \"./accountSasPermissions.js\";\nimport { accountSasPermissionsToString } from \"./accountSasPermissions.js\";\nimport type { SasIPRange } from \"./sasIPRange.js\";\nimport { ipRangeToString } from \"./sasIPRange.js\";\nimport type { SasProtocol } from \"./sasQueryParameters.js\";\nimport { SasQueryParameters } from \"./sasQueryParameters.js\";\nimport {\n  accountSasResourceTypesFromString,\n  accountSasResourceTypesToString,\n} from \"./accountSasResourceTypes.js\";\nimport { accountSasServicesFromString, accountSasServicesToString } from \"./accountSasServices.js\";\nimport type { NamedKeyCredential } from \"@azure/core-auth\";\nimport { SERVICE_VERSION } from \"../utils/constants.js\";\nimport { computeHMACSHA256 } from \"../utils/computeHMACSHA256.js\";\nimport { truncatedISO8061Date } from \"../utils/truncateISO8061Date.js\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * AccountSASSignatureValues is used to generate a Shared Access Signature (SAS) for an Azure Storage account. Once\n * all the values here are set appropriately, call {@link generateAccountSasQueryParameters} to obtain a representation\n * of the SAS which can actually be applied to table urls. Note: that both this class and {@link SasQueryParameters}\n * exist because the former is mutable and a logical representation while the latter is immutable and used to generate\n * actual REST requests.\n *\n * @see https://learn.microsoft.com/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n * for more conceptual information on SAS\n *\n * @see https://learn.microsoft.com/rest/api/storageservices/constructing-an-account-sas\n * for descriptions of the parameters, including which are required\n */\nexport interface AccountSasSignatureValues {\n  /**\n   * If not provided, this defaults to the service version targeted by this version of the library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols allowed.\n   */\n  protocol?: SasProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * The time after which the SAS will no longer work.\n   */\n  expiresOn: Date;\n\n  /**\n   * Specifies which operations the SAS user may perform. Please refer to {@link AccountSasPermissions} for help\n   * constructing the permissions string.\n   */\n  permissions: AccountSasPermissions;\n\n  /**\n   * Optional. IP range allowed.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The values that indicate the services accessible with this SAS. Please refer to {@link AccountSasServices} to\n   * construct this value.\n   */\n  services: string;\n\n  /**\n   * The values that indicate the resource types accessible with this SAS. Please refer\n   * to {@link AccountSasResourceTypes} to construct this value.\n   */\n  resourceTypes: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SasQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param accountSasSignatureValues -\n * @param sharedKeyCredential -\n */\nexport function generateAccountSasQueryParameters(\n  accountSasSignatureValues: AccountSasSignatureValues,\n  credential: NamedKeyCredential,\n): SasQueryParameters {\n  const version = accountSasSignatureValues.version\n    ? accountSasSignatureValues.version\n    : SERVICE_VERSION;\n\n  const parsedPermissions = accountSasPermissionsToString(accountSasSignatureValues.permissions);\n  const parsedServices = accountSasServicesToString(\n    accountSasServicesFromString(accountSasSignatureValues.services),\n  );\n  // to and from string to guarantee the correct order of resoruce types is generated\n  const parsedResourceTypes = accountSasResourceTypesToString(\n    accountSasResourceTypesFromString(accountSasSignatureValues.resourceTypes),\n  );\n\n  const stringToSign = [\n    credential.name,\n    parsedPermissions,\n    parsedServices,\n    parsedResourceTypes,\n    accountSasSignatureValues.startsOn\n      ? truncatedISO8061Date(accountSasSignatureValues.startsOn, false)\n      : \"\",\n    truncatedISO8061Date(accountSasSignatureValues.expiresOn, false),\n    accountSasSignatureValues.ipRange ? ipRangeToString(accountSasSignatureValues.ipRange) : \"\",\n    accountSasSignatureValues.protocol ? accountSasSignatureValues.protocol : \"\",\n    version,\n    \"\", // Account SAS requires an additional newline character\n  ].join(\"\\n\");\n\n  const signature: string = computeHMACSHA256(stringToSign, credential.key);\n\n  return new SasQueryParameters(version, signature, {\n    permissions: parsedPermissions.toString(),\n    services: parsedServices,\n    resourceTypes: parsedResourceTypes,\n    protocol: accountSasSignatureValues.protocol,\n    startsOn: accountSasSignatureValues.startsOn,\n    expiresOn: accountSasSignatureValues.expiresOn,\n    ipRange: accountSasSignatureValues.ipRange,\n  });\n}\n"]}